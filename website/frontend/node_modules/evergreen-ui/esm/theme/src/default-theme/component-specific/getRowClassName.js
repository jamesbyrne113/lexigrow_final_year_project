import tinycolor from 'tinycolor2';
import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var Appearances = {};
Appearances["default"] = Themer.createRowAppearance({
  base: {},
  hover: {
    backgroundColor: scales.neutral.N1A
  },
  focus: {
    backgroundColor: scales.blue.B1A
  },
  active: {
    backgroundColor: scales.blue.B2A
  },
  current: {}
});
Appearances.danger = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.red.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.red.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.red.lightest).darken(1.5).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.red.lightest).darken(2.2).toString()
  },
  current: {}
});
Appearances.warning = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.orange.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(1.5).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(2.5).toString()
  },
  current: {}
});
Appearances.success = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.green.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.green.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.green.lightest).darken(2).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.green.lightest).darken(3).toString()
  },
  current: {}
});
/**
 * Get the appearance of a `Row`.
 * @param {string} appearance â€” only one default appearance.
 * @param {string} intent - none, info, success, warning, danger.
 * @return {string} the appearance object.
 */

var getRowAppearance = function getRowAppearance(appearance, intent) {
  switch (intent) {
    case 'danger':
      return Appearances.danger;

    case 'warning':
      return Appearances.warning;

    case 'success':
      return Appearances.success;

    case 'none':
    default:
      return Appearances["default"];
  }
};
/**
 * Get the className of a `Row`.
 * @param {string} appearance
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getRowAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0Um93Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbInRpbnljb2xvciIsIlRoZW1lciIsIm1lbW9pemVDbGFzc05hbWUiLCJzY2FsZXMiLCJwYWxldHRlIiwiQXBwZWFyYW5jZXMiLCJjcmVhdGVSb3dBcHBlYXJhbmNlIiwiYmFzZSIsImhvdmVyIiwiYmFja2dyb3VuZENvbG9yIiwibmV1dHJhbCIsIk4xQSIsImZvY3VzIiwiYmx1ZSIsIkIxQSIsImFjdGl2ZSIsIkIyQSIsImN1cnJlbnQiLCJkYW5nZXIiLCJyZWQiLCJsaWdodGVzdCIsImRhcmtlbiIsInRvU3RyaW5nIiwid2FybmluZyIsIm9yYW5nZSIsInN1Y2Nlc3MiLCJncmVlbiIsImdldFJvd0FwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIiwiaW50ZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixvQkFBdkI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QiwyQkFBN0I7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLCtCQUFuQjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0NBQXBCO0FBRUEsSUFBTUMsV0FBVyxHQUFHLEVBQXBCO0FBRUFBLFdBQVcsV0FBWCxHQUFzQkosTUFBTSxDQUFDSyxtQkFBUCxDQUEyQjtBQUMvQ0MsRUFBQUEsSUFBSSxFQUFFLEVBRHlDO0FBRy9DQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsZUFBZSxFQUFFTixNQUFNLENBQUNPLE9BQVAsQ0FBZUM7QUFEM0IsR0FId0M7QUFPL0NDLEVBQUFBLEtBQUssRUFBRTtBQUNMSCxJQUFBQSxlQUFlLEVBQUVOLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZQztBQUR4QixHQVB3QztBQVcvQ0MsRUFBQUEsTUFBTSxFQUFFO0FBQ05OLElBQUFBLGVBQWUsRUFBRU4sTUFB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QTNCLENBQXRCO0FBMEJBOzs7Ozs7O0FBTUEsSUFBTVUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxVQUFELEVBQWFDLE1BQWIsRUFBd0I7QUFDL0MsVUFBUUEsTUFBUjtBQUNFLFNBQUssUUFBTDtBQUNFLGFBQU94QixXQUFXLENBQUNhLE1BQW5COztBQUNGLFNBQUssU0FBTDtBQUNFLGFBQU9iLFdBQVcsQ0FBQ2tCLE9BQW5COztBQUNGLFNBQUssU0FBTDtBQUNFLGFBQU9sQixXQUFXLENBQUNvQixPQUFuQjs7QUFDRixTQUFLLE1BQUw7QUFDQTtBQUNFLGFBQU9wQixXQUFXLFdBQWxCO0FBVEo7QUFXRCxDQVpEO0FBY0E7Ozs7Ozs7QUFLQSxlQUFlSCxnQkFBZ0IsQ0FBQ3lCLGdCQUFELENBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRpbnljb2xvciBmcm9tICd0aW55Y29sb3IyJ1xuaW1wb3J0IHsgVGhlbWVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGhlbWVyJ1xuaW1wb3J0IG1lbW9pemVDbGFzc05hbWUgZnJvbSAnLi4vdXRpbHMvbWVtb2l6ZUNsYXNzTmFtZSdcbmltcG9ydCBzY2FsZXMgZnJvbSAnLi4vZm91bmRhdGlvbmFsLXN0eWxlcy9zY2FsZXMnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3BhbGV0dGUnXG5cbmNvbnN0IEFwcGVhcmFuY2VzID0ge31cblxuQXBwZWFyYW5jZXMuZGVmYXVsdCA9IFRoZW1lci5jcmVhdGVSb3dBcHBlYXJhbmNlKHtcbiAgYmFzZToge30sXG5cbiAgaG92ZXI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4xQVxuICB9LFxuXG4gIGZvY3VzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMuYmx1ZS5CMUFcbiAgfSxcblxuICBhY3RpdmU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5ibHVlLkIyQVxuICB9LFxuXG4gIGN1cnJlbnQ6IHt9XG59KVxuXG5BcHBlYXJhbmNlcy5kYW5nZXIgPSBUaGVtZXIuY3JlYXRlUm93QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUucmVkLmxpZ2h0ZXN0XG4gIH0sXG5cbiAgaG92ZXI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRpbnljb2xvcihwYWxldHRlLnJlZC5saWdodGVzdClcbiAgICAgIC5kYXJrZW4oMSlcbiAgICAgIC50b1N0cmluZygpXG4gIH0sXG5cbiAgZm9jdXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRpbnljb2xvcihwYWxldHRlLnJlZC5saWdodGVzdClcbiAgICAgIC5kYXJrZW4oMS41KVxuICAgICAgLnRvU3RyaW5nKClcbiAgfSxcblxuICBhY3RpdmU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRpbnljb2xvcihwYWxldHRlLnJlZC5saWdodGVzdClcbiAgICAgIC5kYXJrZW4oMi4yKVxuICAgICAgLnRvU3RyaW5nKClcbiAgfSxcblxuICBjdXJyZW50OiB7fVxufSlcblxuQXBwZWFyYW5jZXMud2FybmluZyA9IFRoZW1lci5jcmVhdGVSb3dBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5vcmFuZ2UubGlnaHRlc3RcbiAgfSxcblxuICBob3Zlcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUub3JhbmdlLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigxKVxuICAgICAgLnRvU3RyaW5nKClcbiAgfSxcblxuICBmb2N1czoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUub3JhbmdlLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigxLjUpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGFjdGl2ZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUub3JhbmdlLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigyLjUpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGN1cnJlbnQ6IHt9XG59KVxuXG5BcHBlYXJhbmNlcy5zdWNjZXNzID0gVGhlbWVyLmNyZWF0ZVJvd0FwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmdyZWVuLmxpZ2h0ZXN0XG4gIH0sXG5cbiAgaG92ZXI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRpbnljb2xvcihwYWxldHRlLmdyZWVuLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigxKVxuICAgICAgLnRvU3RyaW5nKClcbiAgfSxcblxuICBmb2N1czoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUuZ3JlZW4ubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDIpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGFjdGl2ZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUuZ3JlZW4ubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDMpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGN1cnJlbnQ6IHt9XG59KVxuXG4vKipcbiAqIEdldCB0aGUgYXBwZWFyYW5jZSBvZiBhIGBSb3dgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2Ug4oCUIG9ubHkgb25lIGRlZmF1bHQgYXBwZWFyYW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlbnQgLSBub25lLCBpbmZvLCBzdWNjZXNzLCB3YXJuaW5nLCBkYW5nZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBhcHBlYXJhbmNlIG9iamVjdC5cbiAqL1xuY29uc3QgZ2V0Um93QXBwZWFyYW5jZSA9IChhcHBlYXJhbmNlLCBpbnRlbnQpID0+IHtcbiAgc3dpdGNoIChpbnRlbnQpIHtcbiAgICBjYXNlICdkYW5nZXInOlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLmRhbmdlclxuICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLndhcm5pbmdcbiAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgIHJldHVybiBBcHBlYXJhbmNlcy5zdWNjZXNzXG4gICAgY2FzZSAnbm9uZSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBBcHBlYXJhbmNlcy5kZWZhdWx0XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNsYXNzTmFtZSBvZiBhIGBSb3dgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2VcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGFwcGVhcmFuY2UgY2xhc3MgbmFtZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNsYXNzTmFtZShnZXRSb3dBcHBlYXJhbmNlKVxuIl19